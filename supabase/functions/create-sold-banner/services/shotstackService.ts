
export const renderWithShotstack = async (renderPayload: any) => {
  console.log("üöÄ Envoi du rendu √† Shotstack.");
  try {
    // V√©rification de la pr√©sence de la cl√© API
    const apiKey = Deno.env.get("SHOTSTACK_API_KEY");
    if (!apiKey) {
      throw new Error("‚ùå Cl√© API Shotstack manquante dans les variables d'environnement.");
    }

    // Simplification du payload pour √©viter les erreurs de validation
    const simplifiedPayload = {
      timeline: {
        background: "#000000",
        tracks: renderPayload.timeline.tracks
      },
      output: {
        format: "png",
        resolution: "hd"
      },
      callback: renderPayload.callback
    };

    // Log complet du payload pour debugging
    console.log("üìù Payload simplifi√©:", JSON.stringify(simplifiedPayload, null, 2));

    const response = await fetch("https://api.shotstack.io/v1/render", {
      method: "POST",
      headers: {
        "x-api-key": apiKey,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(simplifiedPayload),
    });

    console.log("‚úÖ Statut de Shotstack:", response.status);
    const responseData = await response.json();
    console.log("üìù R√©ponse de Shotstack:", JSON.stringify(responseData, null, 2));

    if (!response.ok) {
      // Log plus d√©taill√© de l'erreur
      console.error("‚ùå D√©tails de l'erreur:", JSON.stringify(responseData, null, 2));
      throw new Error(`Erreur de l'API Shotstack: ${response.status} ${response.statusText} - ${JSON.stringify(responseData)}`);
    }

    const renderId = responseData.response?.id;
    if (!renderId) {
      throw new Error("‚ùå R√©ponse invalide de Shotstack: ID de rendu manquant");
    }
    
    return renderId;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'appel √† Shotstack:", error);
    throw error;
  }
};
