
export const renderWithShotstack = async (renderPayload: any) => {
  console.log("üöÄ D√©but de la fonction renderWithShotstack");
  try {
    // V√©rification de la pr√©sence de la cl√© API
    const apiKey = Deno.env.get("SHOTSTACK_API_KEY");
    if (!apiKey) {
      throw new Error("‚ùå Cl√© API Shotstack manquante dans les variables d'environnement.");
    }

    // Validation des images avant l'envoi
    if (renderPayload.timeline.tracks[0].clips.length > 0) {
      const clips = renderPayload.timeline.tracks[0].clips;
      console.log(`üñºÔ∏è Validation de ${clips.length} clips avant envoi`);
      
      // V√©rification des URLs d'images
      for (const clip of clips) {
        if (clip.asset && clip.asset.type === 'image' && clip.asset.src) {
          console.log(`‚úì Clip image trouv√©, URL: ${clip.asset.src.substring(0, 50)}...`);
        }
        
        // V√©rification sp√©cifique pour l'image du courtier
        if (clip.position === "bottomLeft" && clip.asset && clip.asset.type === 'image') {
          console.log(`‚úì Image du courtier trouv√©e, scale: ${clip.scale}, position: ${clip.position}`);
        }
      }
    }

    // Simplification du payload pour √©viter les erreurs de validation
    const simplifiedPayload = {
      timeline: {
        background: "#000000",
        tracks: [
          {
            clips: renderPayload.timeline.tracks[0].clips.map((clip: any) => {
              // Cr√©e une copie propre de chaque clip
              return JSON.parse(JSON.stringify(clip));
            })
          }
        ]
      },
      output: {
        format: "png",
        resolution: "hd"
      },
      callback: renderPayload.callback
    };

    // Log complet du payload final pour debugging
    console.log("üìù PAYLOAD FINAL ENVOY√â √Ä SHOTSTACK:", JSON.stringify(simplifiedPayload, null, 2));

    // Appel √† l'API Shotstack avec le payload simplifi√©
    const response = await fetch("https://api.shotstack.io/v1/render", {
      method: "POST",
      headers: {
        "x-api-key": apiKey,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(simplifiedPayload),
    });

    console.log("üìä Statut de r√©ponse Shotstack:", response.status);
    
    const responseData = await response.json();
    console.log("üìù R√©ponse d√©taill√©e de Shotstack:", JSON.stringify(responseData, null, 2));

    if (!response.ok) {
      // Log tr√®s d√©taill√© de l'erreur
      console.error("‚ùå ERREUR API SHOTSTACK - Code:", response.status);
      console.error("‚ùå D√©tails de l'erreur:", JSON.stringify(responseData, null, 2));
      
      throw new Error(`Erreur de l'API Shotstack: ${response.status} ${response.statusText} - ${JSON.stringify(responseData)}`);
    }

    const renderId = responseData.response?.id;
    if (!renderId) {
      throw new Error("‚ùå R√©ponse invalide de Shotstack: ID de rendu manquant");
    }
    
    console.log("‚úÖ Rendu Shotstack initialis√© avec succ√®s, ID:", renderId);
    return renderId;
  } catch (error) {
    console.error("‚ùå ERREUR CRITIQUE lors de l'appel √† Shotstack:", error);
    throw error;
  }
};
