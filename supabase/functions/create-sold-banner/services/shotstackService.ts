
export const renderWithShotstack = async (renderPayload: any) => {
  console.log("üöÄ D√©but de la fonction renderWithShotstack");
  try {
    // V√©rification de la pr√©sence de la cl√© API
    const apiKey = Deno.env.get("SHOTSTACK_API_KEY");
    if (!apiKey) {
      throw new Error("‚ùå Cl√© API Shotstack manquante dans les variables d'environnement.");
    }

    // Log complet du payload final pour debugging
    console.log("\nüìù PAYLOAD FINAL ENVOY√â √Ä SHOTSTACK:");
    console.log(JSON.stringify(renderPayload, null, 2));

    // Appel √† l'API Shotstack
    const response = await fetch("https://api.shotstack.io/v1/render", {
      method: "POST",
      headers: {
        "x-api-key": apiKey,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(renderPayload),
    });

    console.log("üìä Statut de r√©ponse Shotstack:", response.status);
    
    const responseData = await response.json();
    console.log("üìù R√©ponse d√©taill√©e de Shotstack:", JSON.stringify(responseData, null, 2));

    if (!response.ok) {
      // Log tr√®s d√©taill√© de l'erreur
      console.error("‚ùå ERREUR API SHOTSTACK - Code:", response.status);
      console.error("‚ùå D√©tails de l'erreur:", JSON.stringify(responseData, null, 2));
      
      // Si des d√©tails de validation sont disponibles, les afficher
      if (responseData.response?.error?.details) {
        console.error("üîç D√©tails sp√©cifiques de validation:", JSON.stringify(responseData.response.error.details, null, 2));
      }
      
      throw new Error(`Erreur de l'API Shotstack: ${response.status} ${response.statusText} - ${JSON.stringify(responseData)}`);
    }

    const renderId = responseData.response?.id;
    if (!renderId) {
      throw new Error("‚ùå R√©ponse invalide de Shotstack: ID de rendu manquant");
    }
    
    console.log("‚úÖ Rendu Shotstack initialis√© avec succ√®s, ID:", renderId);
    return renderId;
  } catch (error) {
    console.error("‚ùå ERREUR CRITIQUE lors de l'appel √† Shotstack:", error);
    throw error;
  }
};
